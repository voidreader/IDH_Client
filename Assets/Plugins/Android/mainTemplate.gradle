// GENERATED BY UNITY. REMOVE THIS COMMENT TO PREVENT OVERWRITING WHEN EXPORTING AGAIN
buildscript {
	repositories {
		// if (GradleVersion.current() >= GradleVersion.version("4.2")) {
            google()
            jcenter()
        // } else {
        //     jcenter()
        // }
    }
    dependencies {
		// 		if (GradleVersion.current() < GradleVersion.version("4.0")) {
        //     classpath 'com.android.tools.build:gradle:2.1.0'
        // } else if (GradleVersion.current() < GradleVersion.version("4.2")) {
        //     classpath 'com.android.tools.build:gradle:2.3.0'
        // } else {
            classpath 'com.android.tools.build:gradle:3.4.0'
        // }
				classpath 'com.google.gms:google-services:3.2.0'
	}
}

allprojects {
   repositories {
		flatDir {
			dirs 'libs'
		}

		// if (GradleVersion.current() >= GradleVersion.version("4.2")) {
            google()
            jcenter()
        // } else {
        //     jcenter()
        // }
   }
}

apply plugin: 'com.android.application'

dependencies {
	// if (GradleVersion.current() >= GradleVersion.version("4.2")) {
		implementation fileTree(include: ['*.jar'], dir: 'libs')
		implementation project(":GamePotResources")
		implementation project(':Firebase')
	// } else {
	// 	compile fileTree(include: ['*.jar'], dir: 'libs')
	// 	compile project(":GamePotResources")
	// 	compile project(':Firebase')
	// }
}

fileTree(dir: 'libs', include: ['*.aar'])
        .each { File file ->
    //  println file.name
	// if (GradleVersion.current() >= GradleVersion.version("4.2")) {
		dependencies.add("implementation", [name: file.name.lastIndexOf('.').with { it != -1 ? file.name[0..<it] : file.name }, ext: 'aar'])
	// } else {
    // 	dependencies.add("compile", [name: file.name.lastIndexOf('.').with { it != -1 ? file.name[0..<it] : file.name }, ext: 'aar'])
	// }
}

android {
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

	compileSdkVersion **APIVERSION**
	buildToolsVersion '**BUILDTOOLS**'

	dexOptions {
		javaMaxHeapSize "4g"
	}

	packagingOptions {
		exclude 'META-INF/maven/com.nhncorp.nelo2.android/nelo2-android-sdk/pom.properties'
		exclude 'META-INF/maven/com.nhncorp.nelo2.android/nelo2-android-sdk/pom.xml'
		        exclude 'META-INF/proguard/androidx-annotations.pro'
	}

	defaultConfig {
		minSdkVersion **MINSDKVERSION**
		targetSdkVersion **TARGETSDKVERSION**
		multiDexEnabled true

		applicationId '**APPLICATIONID**'
        versionCode **VERSIONCODE**
        versionName '**VERSIONNAME**'

		ndk {
            abiFilters **ABIFILTERS**
        }

		resValue "string", "gamepot_project_id", "541f35d1-99dc-42d0-b6f8-a01f8128775c" // required
		resValue "string", "gamepot_api_url", "" // required 10.78.160.183:4000
		resValue "string", "gamepot_dash_url", "https://dashboard.gamepot.ntruss.com"
		resValue "string", "gamepot_store", "one" // required
		resValue "string", "gamepot_app_title","IDH" // required (fcm)
		resValue "string", "gamepot_push_default_channel","Default" // required (fcm)
		resValue "string", "facebook_app_id", "809464242801380" // optional (facebook)
		resValue "string", "fb_login_protocol_scheme", "fb809464242801380" // optional (facebook)


		//resValue "string", "gamepot_twitter_consumerkey","xxxxx" // Twitter 개발자 콘솔에서 획득
		//resValue "string", "gamepot_twitter_consumersecret","xxx" // Twitter 개발자 콘솔에서 획득
		//resValue "string", "gamepot_line_channelid","00000000" // Line 개발자 콘솔에서 획득
        // resValue "string", "gamepot_project_id", "" // required
        // resValue "string", "gamepot_api_url", "" // required
        // resValue "string", "gamepot_store", "one" // required
        // resValue "string", "gamepot_app_title","@string/app_name" // required (fcm)
        // resValue "string", "gamepot_push_default_channel","Default" // required (fcm)
		// 		resValue "string", "facebook_app_id", "0" // optional (facebook)
		// 		resValue "string", "fb_login_protocol_scheme", "fb0" // optional (facebook)
		// 		// resValue "string", "gamepot_elsa_projectid", "" // optional (ncp elsa)
	}

	lintOptions {
		abortOnError false
	}

	aaptOptions {
		noCompress '.unity3d', '.ress', '.resource', '.obb'
	}

	**SIGN**

	buildTypes {
		debug {
			jniDebuggable true
			minifyEnabled false
			**SIGNCONFIG**
		}
		release {
			// Set minifyEnabled to true if you want to run ProGuard on your project
			zipAlignEnabled true
			minifyEnabled false
			proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-unity.txt'
			**SIGNCONFIG**
		}
	}
	**PACKAGING_OPTIONS****SPLITS**
}